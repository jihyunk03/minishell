/* re_init_shell_info.c */

int	re_init_shell_info(t_shell_info *parse)
{// 구조 싹 바꾸렴 보기 안좋다^^
	pid_t		pid;
	int			status;
	int			exit_code_origin;
	// if문 안에 들어간 경우만 초기화 하면 되니까 주석처리부분 없애도 될듯?
	// 응 절대 안돼^^ 그러다 큰일날 뻔했단다 이 멍청아
	exit_code_origin = g_exit_code;		// exit이 들어온 경우에 대한 처리...
	g_exit_code = 0;
	if (parse->heredoc_cnt != 0)
	{
		set_signal(IGNORE, IGNORE);
		pid = fork();
		if (pid < 0)
			exit (EXIT_FAILURE);
		else if (pid == 0)
			_check_here_doc(parse);
		waitpid(pid, &status, 0);
		if (WEXITSTATUS(status) == EXIT_FAILURE)
			g_exit_code = EXIT_FAILURE;
		set_signal(JIJI, JIJI);
	}
	_change_shell_info(parse);
	if (g_exit_code == EXIT_FAILURE)
		return (EXIT_FAILURE);
	g_exit_code = exit_code_origin;		// exit이 들어온 경우에 대한 처리...
	return (EXIT_SUCCESS);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   struct.h                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jihykim2 <jihykim2@student.42seoul.kr>     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/09/16 14:14:01 by jihykim2          #+#    #+#             */
/*   Updated: 2023/09/27 04:33:55 by jihykim2         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef STRUCT_H
# define STRUCT_H

# include <termios.h>

/* macro define*/
# define TRUE	1
# define FALSE	0

/* signal define */
# define DEFAULT	0		// original-shell
# define IGNORE		1
# define JIJI		2		// our jiji-shell (exec-process)
# define HRD_CHILD	3		// in here_doc process

/* pipe define */
# define P_READ		0
# define P_WRITE	1

/* heredoc define */
# define HERE_DOC	"/tmp/_here_doc_"

/* redirection type */
typedef enum e_token_type
{
	STR = 1,
	PIPE,
	LEFT_1,			// <
	LEFT_2,			// <<
	RIGHT_1,		// >
	RIGHT_2			// >>
}	t_token_type;

/* [shared data] */
/* parse -> execute: static variable */
typedef struct s_shell_info
{
	int					chunk_cnt;	// count of nodes
	int					heredoc_cnt;
	struct s_env_info	*env;		// env head
	struct s_cmd_info	*cmd;		// cmd head
	struct termios		origin_term;
}	t_shell_info;

/* struct for cmd_node */
typedef struct s_cmd_info
{
	int					cmd_cnt;		// count of commands
	char				**cmd_args;		// array of commands
	struct s_str		*str;
	struct s_redir		*redir;			// redirection head
	struct s_cmd_info	*next;
}	t_cmd_info;

/* struct for str */
typedef struct s_str
{
	t_token_type	type;
	char			*command;
	struct s_str	*next;
}	t_str;

/* struct for redirections */
typedef struct s_redir
{
	t_token_type	type;
	char			*filename;
	struct s_redir	*next;
}	t_redir;

/* struct for env */
typedef struct s_env_info
{
	char				*key;
	char				*value;
	int					idx;
	struct s_env_info	*next;
}	t_env_info;


/* [parsing.c data] */
typedef struct s_token
{
	t_token_type	type;
	char			*value;
	int				valid;
	struct s_token	*next;
}	t_token;

typedef struct s_quote
{
	int		quote_flag;
	char	quote;
}	t_quote;


/* [execute.c data] */
/* struct for exec */
typedef struct s_exec_info
{
	int					here_doc;		// flag
	int					in_fd;
	int					out_fd;
	int					pipe[2];
	char				**cmd_args;		// copy address
	char				**path_args;	// free(needed)
	char				**envp;			// free(needed)
	struct s_env_info	**env;			// copy address
	struct termios		origin_term;	// copy value
}	t_exec_info;

#endif
